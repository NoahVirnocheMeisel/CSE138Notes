"Forlorn Hope" Day 0_0 
Agenda:
Midterm Review
Recap: Weak Consistency - Actually not, just revisit lecture 9 notes(Convergence, Read Your Writes)
Today: the agreeement Problem
       Atomic Commitment
       Two-Phase Commit
       Leader Election 



Midtem Recap: 

Crash Model contained in omission model:

Was looking for an explanation of what that means, specifcally that anything in the crash model can happen in the omissoin model, but not the other way around 

-Cant just say its bigger, need to illustrate an example 


Nope Model= absense of a fault model 


Strong Consistency a saftey or liveness property:
Can show a finite execution where you get something tha



Quorum Question: 

How does it establish total order 
-could have just written the rules!! 0_0 
-could have said it was not strongly consistent as rules don't apply 0:0



Causal Ordering violation but violates FIFO
-BOB SMELLS Example


VIOLATES TOTAL BUT NOT Causal
-4 line thing I originally drew but went insane 


Broadcast thing, A crashes before sending second message so C doesn't deliver 


If B crashes after delivery, is it a correct process?
-up to debate basically 


If you think an answer is correct but lost points talk in OH about it?


Weak Consistency Recap:

Convergence:
Eventual Consistency, e.g eventually all machines will converge on the same value after all operations cease 

Read Your Writes:
After a client writes data, if there are no other writes after, any reads by that client will read that same data 


Causal Consistency is a stronger version of Read Your Writes... (Quiz question)


========================================

Agreement:
Not easy to achieve 

Strongly Consistent Replicated Systems:
Intrinsically vs extrinsically D.S - definition of consistency is going to be different depending on which you have 
-extrinsically distributed means that the distribution isn't fundamental to what we are
    -vending machine state machine: originally meant to run on ONE computer. So strong consistency is comparing this to regular vending machine 
-intrinisically: no single computer version, e.g peer to peer systems


Correct Replicated Systems often appear to be a single computer


Agreement:
If we can figure out a protocol to get a bunch of computers to agree on one thing, then we can establish total order 
-hard to do(and must be hard otherwise why both with primary backup)

To get primary backup to work and be available, we need an oracle to get all of the computers to agree that a computer is down

How can we get oracles to work and reconfigure itself if computers that make up the oracle crash 0_0



Agreement Properties:

Abstract picture of Agreement Problem is lots of things go in to a black box, and one thing comes out 
More real, is we have A B and C and each are their own computer. Each reads input, and each should return the same value 



1) Agreement
If a node decides a value v, all nodes decide v.
-ambigious wording
If nodes n1, n2 decide v1, v2 respectivley, then v1=v2. 
SAFTEY PROPERTY
2) Validity
If a node decides v, v was among the inputs 
3) Termination 
All nodes eventually decide 


Unfortunate thing is similar to CAP theorem we need to pick 2 of these
-Fisher, Lynch, and Patterson(FLP) Impossibility result 

Flavors of Consensus feel like CAP as well
Can do something that is always correct but could never terminate, or can do something that is not always correct but will always terminate 


Recovery in Replicated Systems
Primary Backup system where primary crashes after write, and before hearing back from backups . Only send message to B1 and not B2

Oracle exists:
Creates a new view with just B1 and B2

Needs to make one of the two nodes a primary 
Lets say it nondeterministically chose primary 

B1 thinks x =1 
B2 thinks x=NULL 

If we make B1 the primary, B1 thinks x=1 and tells B2 
If we make B2 the primary ... it doesn't know about x 
-just need to rollback with timestamps 

Takeaway:
Recovery in Replicated Systems is easy

Not all things are easy to undo
-easy to break a window, hard to unbreak 

Issues: 
1) Uninvertible Actions 
-messages are uninvertible
-effects that escape our scope, e.g go to client

What if we could tell the client an ack before sending message to backups
-contained in a box
-contains a pact basically saying if i crash then you must also crash
    -promise/future async programming





2) Compound Actions 

Alice and Bob Example:


Alice and Bob are married with separate checking accounts


Alice has $50
Bob has $10 

Transfer $25
-Compound Operations
-substract $25 from Alice, Add $25 to Bob 


On a single computer, how do you stage work
-Stage = See if you can perform this operation, and be ready to perform it when I tell you

Shadow Staging in Single Computer System Programming

Say we have a page P with $10 in it 
Make a copy of P, P'

We have a pointer to P 
No pointer to P' , which we can use as our scratchpad
-if it works and we're ready, just swap the pointer
    -guarantee of hardware is we can atomicly write 1 word at a time 


In distributed, we have a coordinator who tells A and B  to push their staged commit basicaly

Coordinator(primary in PB) sends Prepare(T) to backups
If it gets ALL yes votes from the backups, end of phases 1,  broadcasts commit message andthen gets acks, end of phase 2

Jim Gray; The two phase Commit protocol is much like a marriage ceremony. 

"Do you take..." If both say yes, minister says I now pronounce you. If even one says no, minister says go home not happening 


State Machines:

Coordinator:
Initial Sate -Client message-> Preparing State

Preparing State --No--> Abort 
Preparing State --AllYes->Commit 

Participant Staging:
I --Prepare-> Stage 

Stage --Fail--> Abort 
Stage --Success->Wait 
Wait --Nope->Abort
Wait --Go Ahead-->Commit 

This protocol choose agreement and validity, forgoes Termination
Worried about the Preparing state and the Wait state 


Faults: 

1) Message Loss? Reliable Broadcast 
2)Participant Failure 
-could suspect a crash(timeout) and just send abort message 
-even if "crashed" node is just being slow and message eventaully arrives, aborting is "fine" - put in a pin in this 
-this is called Unilateral Abort 
3) Coordinator Fails -_0 
-Unilateral abort will not work
-will discuss after next week. Mega cliffhanger omg next time on Distibuted Systems whoooooo 


